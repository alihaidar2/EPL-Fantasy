@{
    ViewData["Title"] = "Display Data";
    string[] TableHeaders = new string[] {
        "Element Type", "First Name", "Last Name", "Form", "Cost", "PPG",  "% Selected", 
         "Team Id",  "Total Points", "Transfers In", "Transfers Out",  "Minutes Played", "Goals", "Assists", 
         "Clean Sheets", "Conceded", "Own Goals", "Pens Saved", "Pens Missed", "Yellow Cards", "Red Cards", 
         "Saves", "Bonus", "BPS", "Influence", "Creativity", "Threat", "ICT Index"};


        @* "id", "first_name", "second_name", "in_dreamteam", "news", transfers_out_event, value_form, value_season, transfers_in_event, team_code, special, squad_number, status, news_added, photo, ep_next, ep_this, event_points, chance_of_playing_next_round, chance_of_playing_this_round, code, cost_change_event, 
        cost_change_event_fall, cost_change_start, cost_change_start_fall, dreamteam_count, corners_and_indirect_freekicks_order, corners_and_indirect_freekicks_text, direct_freekicks_order, 
        direct_freekicks_text, penalties_order, penalties_text, influence_rank, influence_rank_type, creativity_rank, 
        creativity_rank_type, threat_rank, threat_rank_type, ict_index_rank, ict_index_rank_type,  *@

    
}

<style>
    #myInput {
        background-image: url('/css/searchicon.png'); /* Add a search icon to input */
        background-position: 10px 12px; /* Position the search icon */
        background-repeat: no-repeat; /* Do not repeat the icon image */
        width: 100%; /* Full-width */
        font-size: 16px; /* Increase font-size */
        padding: 12px 20px 12px 40px; /* Add some padding */
        border: 1px solid #ddd; /* Add a grey border */
        margin-bottom: 12px; /* Add some space below the input */
        }

        #myTable {
        border-collapse: collapse; /* Collapse borders */
        width: 100%; /* Full-width */
        border: 1px solid #ddd; /* Add a grey border */
        font-size: 18px; /* Increase font-size */
        }

        #myTable th, #myTable td {
        text-align: left; /* Left-align text */
        padding: 12px; /* Add padding */
        }

        #myTable tr {
        /* Add a bottom border to all table rows */
        border-bottom: 1px solid #ddd; 
        }

        #myTable tr.header, #myTable tr:hover {
        /* Add a grey background color to the table header and on hover */
        background-color: #f1f1f1;
    }
</style>

<html>
    <p><button onclick="sortTable()">Sort</button></p>
    <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search for names..">
    
    <table id="myTable" class="table table-bordered table-responsive table-hover">
        <thead>
            <tr>
                @{
                    int i = 0;
                    while (i < TableHeaders.Count()) {
                        foreach (var head in TableHeaders){
                            <th onclick='sortTable(@i)'> @head </th>
                            i = i + 1;
                        } 
                    }
                           
                }
            </tr>
        </thead>
        <tbody>
            @{
                if (Model != null) {
                    foreach (var Data in Model) {
                        <tr>
                            <td>@Data.element_type</td>
                            <td>@Data.first_name</td>
                            <td>@Data.second_name</td>
                            <td>@Data.form</td>
                            <td>@Data.now_cost</td>
                            <td>@Data.points_per_game</td>
                            <td>@Data.selected_by_percent</td>
                            <td>@Data.team</td>
                            <td>@Data.total_points</td>
                            <td>@Data.transfers_in</td>
                            <td>@Data.transfers_out</td>
                            <td>@Data.minutes</td>
                            <td>@Data.goals_scored</td>
                            <td>@Data.assists</td>
                            <td>@Data.clean_sheets</td>
                            <td>@Data.goals_conceded</td>
                            <td>@Data.own_goals</td>
                            <td>@Data.penalties_saved</td>
                            <td>@Data.penalties_missed</td>
                            <td>@Data.yellow_cards</td>
                            <td>@Data.red_cards</td>
                            <td>@Data.saves</td>
                            <td>@Data.bonus</td>
                            <td>@Data.bps</td>
                            <td>@Data.influence</td>
                            <td>@Data.creativity</td>
                            <td>@Data.threat</td>
                            <td>@Data.ict_index</td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>

    <script>
    function sortTable() {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        var n = 2;
        table = document.getElementById("myTable");
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc"; 
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch= true;
                    break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                    }   
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount ++;      
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }   
            }
        }
    }

    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("myTable");
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc"; 
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch= true;
                    break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount ++;      
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }

    function myFunction() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[0];
            if (td) {
                txtValue = td.textContent || td.innerText;
            }
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                tr[i].style.display = "";
            } else {
                tr[i].style.display = "none";
            }
        }       
    }
    </script>

</html>

